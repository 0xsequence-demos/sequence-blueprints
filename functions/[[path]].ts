import { createPagesFunctionHandler } from '@react-router/cloudflare';

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - the server build file is generated by `remix vite:build`
// eslint-disable-next-line import/no-unresolved
import * as build from '../build/server';

const remixHandler = createPagesFunctionHandler({ build });

// Cache with stale-while-revalidate support
// --
// This worker is written such that every page will by default be cached for 5 minutes
// at the edge (cloudflare's CDN). As well, even once the page cache expires, the worker
// will serve the page from the cache and it will refresh the cache in the background.
// This ensures we can offer fast load times for clients, while also keeping our pages
// up to date every 5 minutes. 
let cacheEnabled = true;
let cacheDefaultTTL = 300; // 5 minutes
let cacheStaleWhileRevalidateTTL = 86400 * 2; // 2 days in seconds

export const onRequest: PagesFunction = async (context) => {
  const { request } = context;

  // Only cache GET requests. Others go straight through. Or if cache is disabled.
  if (request.method !== 'GET' || !cacheEnabled) {
    const response = await remixHandler(context);
    return response;
  }

  // Standard cloudflare cache with stale-while-revalidate.
  const response = await remixHandler(context);

  // Informs browsers the caching policy for this page, so browsers will cache the
  // page for a short time.
  response.headers.set('cache-control', `max-age=${cacheDefaultTTL}`);

  // Informs cloudflare edge servers the caching policy for their servers.
  // Note the use of stale-with-revalidate.
  response.headers.set('cdn-cache-control', `max-age=${cacheDefaultTTL}, stale-while-revalidate=${cacheStaleWhileRevalidateTTL}, stale-if-error=${cacheStaleWhileRevalidateTTL}`);

  // Serve the content.
  return response;
}
