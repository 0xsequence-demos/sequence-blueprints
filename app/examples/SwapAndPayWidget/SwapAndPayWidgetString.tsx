export const codeString = "import { useAccount } from \"wagmi\";\nimport { useSwapModal, type SwapModalSettings } from \"@0xsequence/checkout\";\nimport { WalletConnectionDetail } from \"~/components/wallet-connection-detail/WalletConnectionDetail\";\nimport { ethers } from \"ethers\";\nimport { useState } from \"react\";\ninterface Props {\n  setData: (data: `0x${string}` | undefined) => void;\n}\nexport const SwapAndPayWidget = (props: Props) => {\n  const { address } = useAccount();\n  const [isPending, setPending] = useState(false);\n  const [data, setData] = useState<`0x${string}` | undefined>();\n  const { openSwapModal } = useSwapModal();\n  const onClick = () => {\n    setPending(true);\n    const chainId = 137;\n    const currencyAddress = \"0x3c499c542cEF5E3811e1192ce70d8cC03d5c3359\";\n    const currencyAmount = \"200000\";\n    const contractAbiInterface = new ethers.Interface([\"function demo()\"]);\n    const data = contractAbiInterface.encodeFunctionData(\n      \"demo\",\n      [],\n    ) as `0x${string}`;\n    const swapModalSettings: SwapModalSettings = {\n      onSuccess: (txHash) => {\n        setPending(false);\n        console.log(\"swap successful!\");\n        setData(txHash as `0x${string}`);\n        props.setData(txHash as `0x${string}`);\n      },\n      chainId,\n      toTokenAddress: currencyAddress,\n      toTokenAmount: currencyAmount,\n      postSwapTransactions: [\n        {\n          to: \"0x37470dac8a0255141745906c972e414b1409b470\",\n          data,\n        },\n      ],\n      title: \"Swap and Pay\",\n      description: \"Select a token in your wallet to swap to 0.2 USDC.\",\n    };\n    console.log(\"swapModalSettings\", swapModalSettings);\n    openSwapModal(swapModalSettings);\n  };\n  return address ? (\n    <>\n      <WalletConnectionDetail address={address} />\n      {isPending ? (\n        <button className=\"ghost\">Pending...</button>\n      ) : (\n        <button onClick={onClick}>Swap and Pay</button>\n      )}\n      {data ? (\n        <div className=\"flex flex-col gap-1 items-start px-12 py-1 mt-8\">\n          <span className=\"text-14 opacity-75\">Transaction hash</span>\n          <p className=\"break-all font-mono text-12\"> {data}</p>\n        </div>\n      ) : null}\n      {/* {error && <p>{error?.message}</p>} */}\n    </>\n  ) : (\n    <>\n      <p>Not connected</p>\n    </>\n  );\n};"