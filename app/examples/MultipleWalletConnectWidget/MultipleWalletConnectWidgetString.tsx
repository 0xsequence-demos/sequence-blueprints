export const codeString = "import { useOpenConnectModal, useWallets } from \"@0xsequence/connect\";\nimport { useMemo } from \"react\";\nimport { useAccount } from \"wagmi\";\nimport { WalletConnectionDetail } from \"~/components/wallet-connection-detail/WalletConnectionDetail\";\nexport const MultipleWalletConnectWidget = () => {\n  const { address } = useAccount();\n  const { setOpenConnectModal } = useOpenConnectModal();\n  const { wallets, linkedWallets } = useWallets();\n  const onClickConnect = () => {\n    setOpenConnectModal(true);\n  };\n  const connectedWallets = useMemo(() => {\n    // Get read-only linked wallets that aren't connected\n    const readOnlyLinkedWallets = (linkedWallets ?? [])\n      .filter(\n        (lw) =>\n          !wallets.some(\n            (w) =>\n              w.address.toLowerCase() === lw.linkedWalletAddress.toLowerCase(),\n          ),\n      )\n      .map((lw) => ({\n        name: lw.walletType || \"Linked Wallet\",\n        address: lw.linkedWalletAddress,\n        isEmbedded: false,\n        isActive: false,\n        isLinked: true,\n        isReadOnly: true,\n      }));\n    // Transform KitWallet to WalletListItemProps\n    const connectedWallets = wallets.map((wallet) => ({\n      name: wallet.name,\n      address: wallet.address,\n      isEmbedded: wallet.isEmbedded,\n      isActive: wallet.isActive,\n      isLinked:\n        linkedWallets?.some(\n          (lw) =>\n            lw.linkedWalletAddress.toLowerCase() ===\n            wallet.address.toLowerCase(),\n        ) ?? false,\n      isReadOnly: false,\n    }));\n    // Sort wallets: embedded first, then by name and address\n    const sortedConnectedWallets = [...connectedWallets].sort((a, b) => {\n      if (a.isEmbedded && !b.isEmbedded) return -1;\n      if (!a.isEmbedded && b.isEmbedded) return 1;\n      return (\n        a.name.toLowerCase().localeCompare(b.name.toLowerCase()) ||\n        a.address.toLowerCase().localeCompare(b.address.toLowerCase())\n      );\n    });\n    // Sort read-only linked wallets by name and address\n    const sortedReadOnlyWallets = [...readOnlyLinkedWallets].sort(\n      (a, b) =>\n        a.name.toLowerCase().localeCompare(b.name.toLowerCase()) ||\n        a.address.toLowerCase().localeCompare(b.address.toLowerCase()),\n    );\n    // Combine all wallets\n    return [...sortedConnectedWallets, ...sortedReadOnlyWallets];\n  }, [wallets, linkedWallets]);\n  return address ? (\n    <>\n      <WalletConnectionDetail address={address} />\n      <button\n        className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n        onClick={onClickConnect}\n      >\n        {connectedWallets.length === 1\n          ? \"Connect another wallet\"\n          : `Manage connected wallets (${connectedWallets.length})`}\n      </button>\n    </>\n  ) : (\n    <>\n      <p>Not connected</p>\n    </>\n  );\n};"