export const codeString = "import { truncateAddress } from \"@0xsequence/design-system\";\nimport { useOpenConnectModal, useKitWallets } from \"@0xsequence/kit\";\nimport { useMemo } from \"react\";\nimport { useAccount } from \"wagmi\";\nexport const MultipleWalletConnectWidget = () => {\n  const { address } = useAccount();\n  const { setOpenConnectModal } = useOpenConnectModal();\n  const { wallets, linkedWallets, setActiveWallet, disconnectWallet } =\n    useKitWallets();\n  const onClickConnect = () => {\n    setOpenConnectModal(true);\n  };\n  const onClickCard = (walletAddress: string) => {\n    setActiveWallet(walletAddress);\n  };\n  const connectedWallets = useMemo(() => {\n    // Get read-only linked wallets that aren't connected\n    const readOnlyLinkedWallets = (linkedWallets ?? [])\n      .filter(\n        (lw) =>\n          !wallets.some(\n            (w) =>\n              w.address.toLowerCase() === lw.linkedWalletAddress.toLowerCase(),\n          ),\n      )\n      .map((lw) => ({\n        name: lw.walletType || \"Linked Wallet\",\n        address: lw.linkedWalletAddress,\n        isEmbedded: false,\n        isActive: false,\n        isLinked: true,\n        isReadOnly: true,\n        onDisconnect: () => {}, // No-op for read-only wallets\n        onUnlink: () => {\n          // unlinkWallet(lw.linkedWalletAddress);\n        },\n      }));\n    // Transform KitWallet to WalletListItemProps\n    const connectedWallets = wallets.map((wallet) => ({\n      name: wallet.name,\n      address: wallet.address,\n      isEmbedded: wallet.isEmbedded,\n      isActive: wallet.isActive,\n      isLinked:\n        linkedWallets?.some(\n          (lw) =>\n            lw.linkedWalletAddress.toLowerCase() ===\n            wallet.address.toLowerCase(),\n        ) ?? false,\n      isReadOnly: false,\n      onDisconnect: () => disconnectWallet(wallet.address),\n      onUnlink: () => {}, // No-op for connected wallets\n    }));\n    // Sort wallets: embedded first, then by name and address\n    const sortedConnectedWallets = [...connectedWallets].sort((a, b) => {\n      if (a.isEmbedded && !b.isEmbedded) return -1;\n      if (!a.isEmbedded && b.isEmbedded) return 1;\n      return (\n        a.name.toLowerCase().localeCompare(b.name.toLowerCase()) ||\n        a.address.toLowerCase().localeCompare(b.address.toLowerCase())\n      );\n    });\n    // Sort read-only linked wallets by name and address\n    const sortedReadOnlyWallets = [...readOnlyLinkedWallets].sort(\n      (a, b) =>\n        a.name.toLowerCase().localeCompare(b.name.toLowerCase()) ||\n        a.address.toLowerCase().localeCompare(b.address.toLowerCase()),\n    );\n    // Combine all wallets\n    return [...sortedConnectedWallets, ...sortedReadOnlyWallets];\n  }, [wallets, linkedWallets, disconnectWallet]);\n  return address ? (\n    <>\n      <div className=\"p-4\">\n        <button\n          className=\"mb-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n          onClick={onClickConnect}\n        >\n          Connect another wallet\n        </button>\n        <div className=\"grid gap-4\">\n          {connectedWallets.map((wallet) => (\n            <div\n              key={wallet.address}\n              className={`flex justify-between items-center p-4 border rounded shadow-sm cursor-pointer ${\n                wallet.isActive ? \"bg-green-100 border-green-500\" : \"bg-white\"\n              }`}\n              onClick={() => onClickCard(wallet.address)}\n            >\n              <div>\n                <div className=\"font-semibold\">\n                  {wallet.name || wallet.address}\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  {truncateAddress(wallets[0]?.address)}\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <button\n                  className=\"px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600\"\n                  onClick={wallet.onDisconnect}\n                >\n                  Disconnect\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  ) : (\n    <>\n      <p>Not connected</p>\n    </>\n  );\n};"